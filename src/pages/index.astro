---
import LottieInteractive from '../components/LottieInteractive.svelte';
import astronautAnimation from '/astronaut.json';
---

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Dominik Ritz</title>
	<link href='https://fonts.googleapis.com/css?family=Montserrat' rel='stylesheet'>
	<style>
		body {
			background-color: #222;
			overflow: hidden;
			margin: 0;
			padding: 0;
			height: 100vh;
			display: flex;
			align-items: center;
			justify-content: center;
			font-family: 'Orbitron', sans-serif;
		}

		.star {
			position: absolute;
			background-color: #fff;
			width: 2px;
			height: 2px;
			border-radius: 50%;
			z-index: -1;
			animation: shimmerFloat 10s infinite ease-in-out;
		}

		#stars {
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			box-sizing: border-box;
		}

		@keyframes shimmerFloat {
			0%, 100% {
				transform: translate(0, 0);
				opacity: 0.3;
			}
			25% {
				transform: translate(-5px, 5px);
				opacity: 0.65;
			}
			50% {
				transform: translate(5px, 5px);
				opacity: 1;
			}
			75% {
				transform: translate(5px, -5px);
				opacity: 0.65;
			}
		}

		@keyframes astronautFloat {
			0%, 100% {
				transform: translate(0, 0);
			}
			25% {
				transform: translate(-10px, 20px);
			}
			50% {
				transform: translate(15px, -15px);
			}
			75% {
				transform: translate(-20px, 10px);
			}
		}

		#name {
			font-size: 7vw;
			font-family: 'Montserrat',serif;
			font-weight: bold;
			text-align: center;
			width: max-content;
			background: linear-gradient(90deg, #8e2de2, #4a00e0, #23d5ab);
			background-size: 200% auto;
			animation: gradient 5s ease infinite;
			z-index: 1;
		}

		#intro {
			font-size: 4vw;
			font-family: 'Montserrat',serif;
			font-weight: bold;
			text-align: center;
			color: #fff;
			position: relative;
			z-index: 1;
		}

		#text-container {
			display: flex;
			flex-direction: column;
			align-items: center;
		}

		@keyframes gradient {
			0% { background-position: 0 50%; }
			50% { background-position: 100% 50%; }
			100% { background-position: 0 50%; }
		}

		#links {
			position: absolute;
			bottom: 10px;
			width: 100%;
			text-align: center;
		}

		#links a {
			color: transparent;
			margin: 0 0.3vw;
		}

		.links-icons:hover path {
			fill: #6D18E2;
			transition: fill 0.4s ease;
		}

		#email-container {
			position: fixed;
			padding: 10px 10px;
			bottom: 0;
			right: 0;
		}

		#email {
			border: none;
			border-radius: 5px;
			cursor: pointer;
		}

		/* Mobile responsive */
		@media (max-width: 767px) {
			#name {
				font-size: 64px;
			}

			#intro {
				font-size: 48px;
			}

			#links svg {
				width: 50px;
				height: 50px;
				margin-left: 5px;
				margin-right: 5px;
			}

			#email-container {
				padding: 15px; /* Adjust padding as needed, but be wary of total width */
				right: 0; /* Ensure it sticks to the right */
				bottom: 0; /* Ensure it sticks to the bottom */
				width: auto; /* Adjust the width or set to auto */
				height: auto; /* Adjust the height or set to auto */
			}

			#email svg {
				width: 10vw; /* Use viewport width to make it responsive */
				height: auto; /* Maintain aspect ratio */
			}
		}
	</style>
	<script>
		window.onload = function() {
			const isMobile = window.innerWidth <= 600;

			let stars = document.getElementById('stars');
			if (!stars) {
				console.error('Element with id "stars" not found');
				return;
			}

			// Scale the canvas by the device pixel ratio
			stars.width = window.innerWidth * devicePixelRatio;
			stars.height = window.innerHeight * devicePixelRatio;

			let ctx = stars.getContext('2d');

			// Scale the drawing context by the same factor
			ctx.scale(devicePixelRatio, devicePixelRatio);

			// Create an array to hold the stars
			let starArray = [];

			// Generate the stars
			for (let i = 0; i < (window.innerWidth / 3840) * 1000; i++) {
				let x = Math.random() * window.innerWidth;
				let y = Math.random() * window.innerHeight;
				let size = 1.75 + Math.random() * 1.5;
				let angle = Math.random() * 2 * Math.PI; // Random angle in radians
				let speed = 0.1; // Speed of the star
				let xVelocity = speed * Math.cos(angle); // Velocity in x direction based on the angle
				let yVelocity = speed * Math.sin(angle); // Velocity in y direction based on the angle
				let opacity = Math.random() * 0.7 + 0.3; // Random initial opacity between 0.3 and 1
				let opacityChange = 0.01; // Amount to change opacity each frame
				let startTime = Date.now(); // Start time of the animation
				let duration = Math.random() * 5000 + 5000; // Duration of the animation

				// Add the star to the array
				starArray.push({ x, y, size, xVelocity, yVelocity, opacity, opacityChange, startTime, duration });
			}

			// Create an array to hold the meteors
			let meteorArray = [];

			// Set an interval to periodically add a new meteor
			setInterval(function() {
				// If the number of meteors is already at the maximum, remove the oldest meteor
				if (meteorArray.length >= 3) { // Change this value to the maximum number of meteors you want
					meteorArray.shift();
				}

				let x = Math.random() * window.innerWidth; // Random x position anywhere on the screen
				let y = Math.random() * window.innerHeight; // Random y position anywhere on the screen
				let size = Math.random() * 30 + 30;
				let speed = Math.random() * 5 + 5; // Random speed between 3 and 5
				let angle = Math.PI / 4; // 45 degrees in radians, towards bottom left
				let opacity = 0; // Initial opacity
				let opacityChange = 0.04; // Amount to change opacity each frame

				// Add the meteor to the array
				meteorArray.push({ x, y, size, speed, angle, opacity, opacityChange });
			}, 2000); // Add a new meteor every 2 seconds

			// Function to update and redraw the stars
			function animateStars() {
				// Clear the canvas
				ctx.clearRect(0, 0, stars.width, stars.height);

				// Get the current time
				const now = Date.now();

				// Loop through the stars
				for (let star of starArray) {
					// Calculate the progress of the animation (0 to 1)
					let progress = (now - star.startTime) % star.duration / star.duration;

					// Apply the easing function to the progress
					progress = 1 - Math.pow(1 - progress, 3);

					// If a new animation cycle is starting, generate a new random angle for the star
					if (progress < 0.01) {
						let angle = Math.random() * 2 * Math.PI; // Random angle in radians
						let speed = 0.05; // Decreased speed of the star
						star.xVelocity = speed * Math.cos(angle); // Velocity in x direction based on the angle
						star.yVelocity = speed * Math.sin(angle); // Velocity in y direction based on the angle
					}

					// Calculate the new position based on the progress
					star.x += star.xVelocity * progress;
					star.y += star.yVelocity * progress;

					// If the star has moved off the screen, wrap it around to the other side
					if (star.x < 0) star.x = stars.width;
					else if (star.x > stars.width) star.x = 0;
					if (star.y < 0) star.y = stars.height;
					else if (star.y > stars.height) star.y = 0;

					// Update the opacity
					star.opacity += star.opacityChange;
					if (star.opacity > 1) {
						star.opacity = 1;
						star.opacityChange = -star.opacityChange;
					} else if (star.opacity < 0.3) {
						star.opacity = 0.3;
						star.opacityChange = -star.opacityChange;
					}

					// Draw the star as a circle with the new opacity
					ctx.beginPath();
					ctx.arc(star.x, star.y, star.size / 2, 0, 2 * Math.PI, false);
					ctx.fillStyle = `rgba(255, 255, 255, ${star.opacity})`;
					ctx.fill();
				}

				// Loop through the meteors
				for (let i = 0; i < meteorArray.length; i++) {
					let meteor = meteorArray[i];

					// Update the position of the meteor
					meteor.x -= meteor.speed * Math.cos(meteor.angle);
					meteor.y += meteor.speed * Math.sin(meteor.angle);

					// Update the opacity
					meteor.opacity += meteor.opacityChange;
					if (meteor.opacity > 1) {
						meteor.opacity = 1;
						meteor.opacityChange = -meteor.opacityChange;
					} else if (meteor.opacity < -0.1) { // Wait until opacity is -0.1 before removing
						meteorArray.splice(i, 1);
						i--;
						continue;
					}

					// Draw the meteor as a series of lines with decreasing size and opacity
					for (let j = 0; j < meteor.size * meteor.opacity; j++) { // Multiply the size by the opacity to make the tail shorter as it disappears
						let tailX = meteor.x + j * Math.cos(meteor.angle);
						let tailY = meteor.y - j * Math.sin(meteor.angle);
						let tailSize = meteor.size * Math.exp(-j / meteor.size); // Use exponential decay for size
						let tailOpacity = meteor.opacity * Math.exp(-j / meteor.size); // Use exponential decay for opacity

						ctx.beginPath();
						ctx.moveTo(tailX, tailY);
						ctx.lineTo(tailX + tailSize * Math.cos(meteor.angle), tailY - tailSize * Math.sin(meteor.angle));
						ctx.strokeStyle = `rgba(255, 255, 255, ${tailOpacity})`; // Orangey yellow color with opacity
						ctx.stroke();
					}
				}

				// Call this function again on the next frame
				requestAnimationFrame(animateStars);
			}

			// Start the animation
			animateStars();

			// <-- Predetermine size of text so that the typewriter effect aligns from left side of the div and fills the space -->
			// Get the text to measure
			const text = "Dominik Ritz";

			// Create a temporary hidden element to measure the width
			const hiddenElement = document.createElement("div");
			hiddenElement.style.visibility = "hidden";
			hiddenElement.style.position = "absolute";
			hiddenElement.style.whiteSpace = "nowrap";
			hiddenElement.style.fontSize = "7vw"
			hiddenElement.style.fontFamily = "Montserrat"
			hiddenElement.style.fontWeight = "bold"
			if(isMobile) {
				hiddenElement.style.wordWrap = "break-word"
			}
			hiddenElement.style.wordWrap =
				hiddenElement.innerText = text;

			// Append the hidden element to the document body
			document.body.appendChild(hiddenElement);

			// Get the width of the hidden element
			const textWidth = hiddenElement.getBoundingClientRect().width;

			// Remove the hidden element from the document body
			document.body.removeChild(hiddenElement);

			// Create the actual text container element with the measured width
			const textContainer = document.getElementById("text-container");
			textContainer.style.width = textWidth + "px";


			// <-- Typing animation -->
			const nameElement = document.getElementById('name');
			const nameText = nameElement.innerHTML;
			nameElement.innerHTML = 'D';

			let currentIndex = 1;
			let typingInterval = setInterval(() => {
				if (currentIndex < nameText.length) {
					if (isMobile && nameText[currentIndex] == ' ') {
						nameElement.innerHTML += '<br>';
					} else {
						nameElement.innerHTML += nameText[currentIndex];
					}
					currentIndex++;
				} else {
					clearInterval(typingInterval);
					// Convert the "hightlighting" gradient to the gradient on the text itself
					nameElement.style.webkitTextFillColor = 'transparent';
					nameElement.style.webkitBackgroundClip = 'text';
					nameElement.style.width = 'fit-content';
				}
			}, 200);
		}
	</script>
</head>
	<body>
	<LottieInteractive client:only animationData={astronautAnimation} data-astronaut/>
	<canvas id="stars"></canvas>
	<div id="text-container">
		<div id="intro">Hi, I'm</div>
		<div id="name">Dominik Ritz</div>
	</div>
	<div id="links">
		<!-- LinkedIn -->
		<a href="https://www.linkedin.com/in/dominik-ritz/" target="_blank">
			<svg class="links-icons" xmlns="http://www.w3.org/2000/svg" width="2.5vw" height="2.5vw" viewBox="0 0 24 24"><path fill="white" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"/></svg>
		</a>
		<!-- GitHub -->
		<a href="https://github.com/Dygitz" target="_blank">
			<svg class="links-icons" xmlns="http://www.w3.org/2000/svg" width="2.5vw" height="2.5vw" viewBox="0 0 24 24"><path fill="white" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-4.466 19.59c-.405.078-.534-.171-.534-.384v-2.195c0-.747-.262-1.233-.55-1.481 1.782-.198 3.654-.875 3.654-3.947 0-.874-.312-1.588-.823-2.147.082-.202.356-1.016-.079-2.117 0 0-.671-.215-2.198.82-.64-.18-1.324-.267-2.004-.271-.68.003-1.364.091-2.003.269-1.528-1.035-2.2-.82-2.2-.82-.434 1.102-.16 1.915-.077 2.118-.512.56-.824 1.273-.824 2.147 0 3.064 1.867 3.751 3.645 3.954-.229.2-.436.552-.508 1.07-.457.204-1.614.557-2.328-.666 0 0-.423-.768-1.227-.825 0 0-.78-.01-.055.487 0 0 .525.246.889 1.17 0 0 .463 1.428 2.688.944v1.489c0 .211-.129.459-.528.385-3.18-1.057-5.472-4.056-5.472-7.59 0-4.419 3.582-8 8-8s8 3.581 8 8c0 3.533-2.289 6.531-5.466 7.59z"/></svg>
		</a>
	</div>
	<!-- Email -->
	<div id="email-container">
		<a id="email" href="mailto:dom_ritz@icloud.com" target="_blank">
			<svg class="links-icons" xmlns="http://www.w3.org/2000/svg" width="4vw" height="3.07vw" viewBox="0 0 72 64"><path fill="white" d="M66.097,12.089h-56.9C4.126,12.089,0,16.215,0,21.286v32.722c0,5.071,4.126,9.197,9.197,9.197h56.9 c5.071,0,9.197-4.126,9.197-9.197V21.287C75.295,16.215,71.169,12.089,66.097,12.089z M61.603,18.089L37.647,33.523L13.691,18.089 H61.603z M66.097,57.206h-56.9C7.434,57.206,6,55.771,6,54.009V21.457l29.796,19.16c0.04,0.025,0.083,0.042,0.124,0.065 c0.043,0.024,0.087,0.047,0.131,0.069c0.231,0.119,0.469,0.215,0.712,0.278c0.025,0.007,0.05,0.01,0.075,0.016 c0.267,0.063,0.537,0.102,0.807,0.102c0.001,0,0.002,0,0.002,0c0.002,0,0.003,0,0.004,0c0.27,0,0.54-0.038,0.807-0.102 c0.025-0.006,0.05-0.009,0.075-0.016c0.243-0.063,0.48-0.159,0.712-0.278c0.044-0.022,0.088-0.045,0.131-0.069 c0.041-0.023,0.084-0.04,0.124-0.065l29.796-19.16v32.551C69.295,55.771,67.86,57.206,66.097,57.206z"/></svg>
		</a>
	</div>
	</body>
</html>