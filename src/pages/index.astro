---
import LottieInteractive from "../components/LottieInteractive.svelte";
import astronautAnimation from "/astronaut.json";
import Timeline from "../components/Timeline.svelte";
import "../styles/global.css";

const jobs = [
	{
		dateRange: "Jan 2025 - Current",
		title: "Software Engineering Intern",
		company: "Hamming AI (YC S24)",
	},
	{
		dateRange: "Oct 2024 - Current",
		title: "Member",
		company: "Cohere For AI",
		description: "",
	},
	{
		dateRange: "Feb 2024 - Oct 2024",
		title: "Autonomous Software Developer",
		company: "WATonomous",
		description:
			"Trained and implemented a graph-based trajectory prediction model, leveraging the nuScenes dataset, to enhance our vehicle's autonomous navigation",
	},
	{
		dateRange: "May 2024 - Aug 2024",
		title: "Software Engineering Intern",
		company: "Carnegie Mellon University CyLab Biometrics Center",
		description:
			"Built a fully autonomous robot from ground up in a team of two to deliver groceries across the CMU campus. Engineered a ROS2 software stack integrating sensor fusion (EKF), AMCL/SLAM for localization, Hybrid A* for motion planning, and MPPI for control, achieving real-time, centimeter-level accurate navigation. Integrated Jetson Orin Nano, Lidar, RTK GPS, Depth Camera, IMU, and Arduino for precise navigation. Built AI checkout system using OpenCV to prevent retail theft by classifying 250K+ Walmart products",
	},
	{
		dateRange: "May 2023 - Jun 2023",
		title: "Data Science Intern",
		company: "MBR Technology",
		description:
			"Trained neural networks for image classification on public datasets like FashionMNIST and ImageNet. Trained CNN with transfer learning, achieving 96% accuracy using 7.7 million parameters",
	},
	{
		dateRange: "Jun 2022 - Aug 2022",
		title: "Software Engineer Intern",
		company: "Palturai",
		description:
			"Developed an interactive knowledge graph visualization tool and a custom language for tailored filtering, aesthetic control, and enhanced data display (RDF-Viewer). Scraped SEC filings, extracting relational data to serve as test cases for RDF-Viewer",
	},
	{
		dateRange: "Jun 2021 - Aug 2021",
		title: "Software Engineer Intern",
		company: "Palturai",
		description:
			"Designed Java SDK to abstract interaction with fraud detection graph database, handling 210M+ relationships",
	},
];
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Dominik Ritz</title>
		<link
			href="https://fonts.googleapis.com/css?family=Montserrat"
			rel="stylesheet"
		/>
		<style>
			body {
				background-color: #222;
				margin: 0;
				padding: 0;
				font-family: "Orbitron", sans-serif;
				overflow-x: hidden;
			}

			.cursor-blackhole {
				position: fixed;
				width: 80px; /* Increased from 20px */
				height: 80px; /* Increased from 20px */
				border-radius: 50%;
				transform: translate(
					-50%,
					-50%
				); /* Add this line to center the blackhole on the cursor */
				background: radial-gradient(
					circle at center,
					rgba(0, 0, 0, 1) 0%,
					rgba(0, 0, 0, 0.9) 25%,
					rgba(0, 0, 0, 0.8) 40%,
					rgba(0, 0, 0, 0.6) 60%,
					rgba(0, 0, 0, 0.3) 80%,
					transparent 100%
				);
				box-shadow: 0 0 40px 5px rgba(0, 0, 0, 0.8); /* Increased shadow to match new size */
				pointer-events: none;
				z-index: 2; /* Change from 9999 to 2 */
				mix-blend-mode: multiply;
				filter: blur(2px); /* Slightly increased blur for larger size */
				display: none; /* Hide by default */
			}

			@media (min-width: 768px) {
				.cursor-blackhole {
					display: block; /* Show only on desktop */
				}
				body {
					cursor: none; /* Hide cursor only on desktop */
				}
			}

			@keyframes blackholePulse {
				0% {
					transform: translate(-50%, -50%) scale(1);
				}
				50% {
					transform: translate(-50%, -50%) scale(0.8);
				}
				100% {
					transform: translate(-50%, -50%) scale(1);
				}
			}

			.star {
				position: absolute;
				background-color: #fff;
				width: 2px;
				height: 2px;
				border-radius: 50%;
				z-index: -1;
				animation: shimmerFloat 10s infinite ease-in-out;
			}

			#stars {
				position: fixed;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				box-sizing: border-box;
				z-index: 1; /* Add this line */
			}

			@keyframes shimmerFloat {
				0%,
				100% {
					transform: translate(0, 0);
					opacity: 0.3;
				}
				25% {
					transform: translate(-5px, 5px);
					opacity: 0.65;
				}
				50% {
					transform: translate(5px, 5px);
					opacity: 1;
				}
				75% {
					transform: translate(5px, -5px);
					opacity: 0.65;
				}
			}

			@keyframes astronautFloat {
				0%,
				100% {
					transform: translate(0, 0);
				}
				25% {
					transform: translate(-10px, 20px);
				}
				50% {
					transform: translate(15px, -15px);
				}
				75% {
					transform: translate(-20px, 10px);
				}
			}

			.hero-section {
				height: 100vh;
				display: flex;
				flex-direction: column;
				align-items: center;
				justify-content: center;
				position: relative;
				overflow: hidden;
				z-index: 3; /* Add this to put sections above blackhole */
			}

			#name {
				visibility: hidden;
				position: absolute;
				font-size: 7vw;
				top: 46%;
				font-family: "Montserrat", serif;
				font-weight: bold;
				text-align: center;
				width: max-content;
				background: linear-gradient(90deg, #8e2de2, #4a00e0, #23d5ab);
				background-size: 200% auto;
				animation: gradient 5s ease infinite;
				z-index: 1;
			}

			#intro {
				font-size: 4vw;
				font-family: "Montserrat", serif;
				font-weight: bold;
				text-align: center;
				color: #fff;
				position: absolute;
				line-height: 1.2;
				top: 36%;
				z-index: 1;
			}

			#text-container {
				display: flex;
				flex-direction: column;
				align-items: center;
			}

			@keyframes gradient {
				0% {
					background-position: 0 50%;
				}
				50% {
					background-position: 100% 50%;
				}
				100% {
					background-position: 0 50%;
				}
			}

			#links {
				margin-top: 2rem;
				position: fixed; /* Change to fixed */
				bottom: 10px;
				left: 10px; /* Stick to the bottom left */
				width: auto; /* Adjust width */
				text-align: left; /* Align text to the left */
				z-index: 4; /* Change from 100 to 4 */
			}

			#links a {
				color: transparent;
				margin: 0 0.3vw;
				display: inline-block;
			}

			.links-icons:hover path {
				fill: #6d18e2;
				transition: fill 0.4s ease;
			}

			#email-container {
				position: fixed;
				padding: 10px 10px;
				bottom: 0;
				right: 0;
				z-index: 100; /* Ensure email stays on top */
			}

			#email {
				border: none;
				border-radius: 5px;
				cursor: pointer;
				margin-left: 1vw;
			}

			.typing-line {
				width: fit-content;
				margin: 0 auto;
			}

			#scroll-indicator {
				position: absolute;
				scale: 3;
				bottom: 5%;
				left: 50%;
				animation: bounce 2s infinite;
				transition: opacity 0.3s ease;
				z-index: 4; /* Change from 100 to 4 */
			}

			#scroll-indicator svg {
				color: white;
			}

			@keyframes bounce {
				0%,
				20%,
				50%,
				80%,
				100% {
					transform: translate(-10%, 0);
				}
				40% {
					transform: translate(-10%, -20px);
				}
				60% {
					transform: translate(-10%, -10px);
				}
			}

			/* Mobile responsive */
			@media (max-width: 767px) {
				#scroll-indicator {
					bottom: 7%;
				}

				#name {
					font-size: 10vw;
					display: flex;
					flex-direction: column;
					align-items: center;
				}

				#name-line1,
				#name-line2 {
					font-size: 9vw;
					line-height: 1.2;
				}

				#intro {
					font-size: 12vw;
					line-height: 1.2;
				}

				#links {
					position: static; /* Remove fixed positioning on mobile */
					margin: 0;
					display: flex;
					align-items: center;
				}

				#links svg {
					width: 32px;
					height: 32px;
					margin: 0 8px;
				}

				#email-container {
					position: static; /* Remove fixed positioning on mobile */
					padding: 0;
				}

				#email svg {
					width: 32px;
					height: 32px;
				}

				#links {
					bottom: 20px; /* Move them a bit higher so they're easier to tap */
				}

				#links svg {
					width: 50px;
					height: 50px;
					margin-left: 5px;
					margin-right: 5px;
					margin-bottom: 6px;
				}

				#email-container {
					right: 20px;
					bottom: 20px;
				}
				#email svg {
					width: 12vw;
					height: auto;
				}
			}

			.about-section {
				display: flex;
				flex-direction: column;
				align-items: center;
				padding: 6rem 2rem 2rem 2rem;
				position: relative;
				z-index: 3; /* Add this to put sections above blackhole */
			}

			.about-card {
				background: #333;
				border-radius: 15px;
				padding: 2rem;
				max-width: 800px;
				width: 90%;
				margin: 0 auto;
				box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
			}

			.about-title {
				text-align: center;
				color: #fff;
				font-family: Montserrat, sans-serif;
				font-size: 3.5rem;
				margin-bottom: 2rem;
			}

			.about-content {
				color: #fff;
				font-family: Montserrat, sans-serif;
				font-size: 1.1rem;
				line-height: 1.6;
				text-align: justify;
			}

			@media (max-width: 767px) {
				.about-title {
					font-size: 2.5rem;
				}
				.about-content {
					font-size: 1rem;
				}
			}

			/* Add a container for both link sections */
			.social-links-container {
				position: fixed;
				bottom: 0;
				left: 0;
				width: 100%;
				display: flex;
				justify-content: space-between;
				align-items: center;
				padding: 10px;
				background: linear-gradient(
					to top,
					rgba(34, 34, 34, 0.9) 0%,
					rgba(34, 34, 34, 0.8) 50%,
					transparent 100%
				);
				z-index: 100; /* Ensure icons always appear above other content */
			}

			/* Mobile responsive */
			@media (max-width: 767px) {
				.social-links-container {
					padding: 15px;
				}
			}
		</style>
		<script>
			window.onload = function () {
				const isMobile = window.innerWidth <= 767;
				let stars = document.getElementById("stars");
				if (!stars) {
					console.error('Element with id "stars" not found');
					return;
				}

				// Canvas setup (for both mobile and desktop)
				stars.width = window.innerWidth * devicePixelRatio;
				stars.height = window.innerHeight * devicePixelRatio;
				let ctx = stars.getContext("2d");
				ctx.scale(devicePixelRatio, devicePixelRatio);

				// Create star array (shared between mobile and desktop)
				let starArray = [];
				for (let i = 0; i < (window.innerWidth / 3840) * 1000; i++) {
					let x = Math.random() * window.innerWidth;
					let y = Math.random() * window.innerHeight;
					let size = 1.75 + Math.random() * 1.5;
					let angle = Math.random() * 2 * Math.PI;
					let speed = 0.1;
					let xVelocity = speed * Math.cos(angle);
					let yVelocity = speed * Math.sin(angle);
					let opacity = Math.random() * 0.7 + 0.3;
					let opacityChange = 0.01;
					let startTime = Date.now();
					let duration = Math.random() * 5000 + 5000;
					starArray.push({
						x,
						y,
						size,
						xVelocity,
						yVelocity,
						opacity,
						opacityChange,
						startTime,
						duration,
						originalX: x, // Store original position
						originalY: y,
						originalXVelocity: xVelocity,
						originalYVelocity: yVelocity,
					});
				}

				// Meteor array setup (shared)
				let meteorArray = [];
				setInterval(function () {
					if (meteorArray.length >= 3) {
						meteorArray.shift();
					}
					let x = Math.random() * window.innerWidth;
					let y = Math.random() * window.innerHeight;
					let size = Math.random() * 30 + 30;
					let speed = Math.random() * 5 + 5;
					let angle = Math.PI / 4;
					let opacity = 0;
					let opacityChange = 0.04;
					meteorArray.push({
						x,
						y,
						size,
						speed,
						angle,
						opacity,
						opacityChange,
					});
				}, 2000);

				if (isMobile) {
					// Mobile-only animation without black hole effects
					function animateStarsSimple() {
						ctx.clearRect(0, 0, stars.width, stars.height);
						const now = Date.now();

						// Simple star animation
						starArray.forEach((star) => {
							let progress =
								((now - star.startTime) % star.duration) /
								star.duration;
							progress = 1 - Math.pow(1 - progress, 3);

							// Basic movement and shimmer
							star.opacity += star.opacityChange;
							if (star.opacity > 1) {
								star.opacity = 1;
								star.opacityChange = -star.opacityChange;
							} else if (star.opacity < 0.3) {
								star.opacity = 0.3;
								star.opacityChange = Math.abs(
									star.opacityChange,
								);
							}

							// Update position
							star.x += star.xVelocity * progress;
							star.y += star.yVelocity * progress;

							// Wrap around edges
							if (star.x < 0) star.x = stars.width;
							else if (star.x > stars.width) star.x = 0;
							if (star.y < 0) star.y = stars.height;
							else if (star.y > stars.height) star.y = 0;

							// Draw star with glow effect
							const gradient = ctx.createRadialGradient(
								star.x,
								star.y,
								0,
								star.x,
								star.y,
								star.size,
							);
							gradient.addColorStop(
								0,
								`rgba(255, 255, 255, ${star.opacity})`,
							);
							gradient.addColorStop(
								0.1,
								`rgba(255, 255, 255, ${star.opacity * 0.8})`,
							);
							gradient.addColorStop(1, "rgba(255, 255, 255, 0)");

							ctx.beginPath();
							ctx.fillStyle = gradient;
							ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);
							ctx.fill();
						});

						// Animate meteors
						for (let i = 0; i < meteorArray.length; i++) {
							let meteor = meteorArray[i];
							meteor.x -= meteor.speed * Math.cos(meteor.angle);
							meteor.y += meteor.speed * Math.sin(meteor.angle);
							meteor.opacity += meteor.opacityChange;
							if (meteor.opacity > 1) {
								meteor.opacity = 1;
								meteor.opacityChange = -meteor.opacityChange;
							} else if (meteor.opacity < -0.1) {
								meteorArray.splice(i, 1);
								i--;
								continue;
							}

							for (
								let j = 0;
								j < meteor.size * meteor.opacity;
								j++
							) {
								let tailX =
									meteor.x + j * Math.cos(meteor.angle);
								let tailY =
									meteor.y - j * Math.sin(meteor.angle);
								let tailSize =
									meteor.size * Math.exp(-j / meteor.size);
								let tailOpacity =
									meteor.opacity * Math.exp(-j / meteor.size);

								ctx.beginPath();
								ctx.moveTo(tailX, tailY);
								ctx.lineTo(
									tailX + tailSize * Math.cos(meteor.angle),
									tailY - tailSize * Math.sin(meteor.angle),
								);
								ctx.strokeStyle = `rgba(255, 255, 255, ${tailOpacity})`;
								ctx.stroke();
							}
						}

						requestAnimationFrame(animateStarsSimple);
					}

					animateStarsSimple();
				} else {
					// Desktop code with black hole effects
					let targetX = 0;
					let targetY = 0;
					let blackholeX = 0;
					let blackholeY = 0;
					let currentX = 0;
					let currentY = 0;
					const INFLUENCE_RADIUS = 150; // Reduced from 200
					const GRAVITY_STRENGTH = 0.2; // Reduced from 0.5
					const RECOVERY_RATE = 0.02;
					const BLACK_HOLE_CORE_RADIUS = 20; // New constant for disappearing effect

					// Add these utility functions for coordinate conversion
					function getCanvasRelativePosition(clientX, clientY) {
						const rect = stars.getBoundingClientRect();
						return {
							x:
								(clientX - rect.left) *
								(stars.width / rect.width),
							y:
								(clientY - rect.top) *
								(stars.height / rect.height),
						};
					}

					// Update blackhole position handler
					document.addEventListener("mousemove", (e) => {
						targetX = e.clientX;
						targetY = e.clientY;
						const canvasPos = getCanvasRelativePosition(
							e.clientX,
							e.clientY,
						);
						blackholeX = canvasPos.x;
						blackholeY = canvasPos.y;

						// Debug output - uncomment to see coordinates
						// console.log('Mouse:', e.clientX, e.clientY);
						// console.log('Canvas:', blackholeX, blackholeY);
					});

					function animateStars() {
						ctx.clearRect(0, 0, stars.width, stars.height);
						const now = Date.now();

						// Stars animation with filtered array to remove consumed stars
						starArray = starArray.filter((star) => {
							let progress =
								((now - star.startTime) % star.duration) /
								star.duration;
							progress = 1 - Math.pow(1 - progress, 3);

							const dx = blackholeX / devicePixelRatio - star.x;
							const dy = blackholeY / devicePixelRatio - star.y;
							const distance = Math.sqrt(dx * dx + dy * dy);

							// Check if star is too close to black hole core
							if (distance < BLACK_HOLE_CORE_RADIUS) {
								return false; // Remove the star
							}

							if (distance < INFLUENCE_RADIUS) {
								// Apply gravitational pull with normalized direction
								const force =
									((INFLUENCE_RADIUS - distance) /
										INFLUENCE_RADIUS) *
									GRAVITY_STRENGTH;
								const directionX = dx / (distance || 1);
								const directionY = dy / (distance || 1);

								star.xVelocity += directionX * force;
								star.yVelocity += directionY * force;

								// Reduced randomness
								star.xVelocity += (Math.random() - 0.5) * 0.05;
								star.yVelocity += (Math.random() - 0.5) * 0.05;

								// Progressive fade out as stars get closer
								star.opacity = Math.max(
									0.1,
									(distance - BLACK_HOLE_CORE_RADIUS) /
										INFLUENCE_RADIUS,
								);
							} else {
								// Return to original behavior
								star.opacity += star.opacityChange;
								if (star.opacity > 1) {
									star.opacity = 1;
									star.opacityChange = -star.opacityChange;
								} else if (star.opacity < 0.3) {
									star.opacity = 0.3;
									star.opacityChange = Math.abs(
										star.opacityChange,
									);
								}

								// Return to original velocity
								star.xVelocity +=
									(star.originalXVelocity - star.xVelocity) *
									RECOVERY_RATE;
								star.yVelocity +=
									(star.originalYVelocity - star.yVelocity) *
									RECOVERY_RATE;
							}

							// Limit maximum velocity to prevent stars from moving too fast
							const maxVelocity = 2;
							const currentVelocity = Math.sqrt(
								star.xVelocity * star.xVelocity +
									star.yVelocity * star.yVelocity,
							);
							if (currentVelocity > maxVelocity) {
								star.xVelocity =
									(star.xVelocity / currentVelocity) *
									maxVelocity;
								star.yVelocity =
									(star.yVelocity / currentVelocity) *
									maxVelocity;
							}

							// Update position with velocity and progress
							star.x += star.xVelocity * progress;
							star.y += star.yVelocity * progress;

							if (star.x < 0) star.x = stars.width;
							else if (star.x > stars.width) star.x = 0;
							if (star.y < 0) star.y = stars.height;
							else if (star.y > stars.height) star.y = 0;

							// Draw star with glow effect
							const gradient = ctx.createRadialGradient(
								star.x,
								star.y,
								0,
								star.x,
								star.y,
								star.size,
							);
							gradient.addColorStop(
								0,
								`rgba(255, 255, 255, ${star.opacity})`,
							);
							gradient.addColorStop(
								0.1,
								`rgba(255, 255, 255, ${star.opacity * 0.8})`,
							);
							gradient.addColorStop(1, "rgba(255, 255, 255, 0)");

							ctx.beginPath();
							ctx.fillStyle = gradient;
							ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);
							ctx.fill();

							return true; // Keep the star in the array
						});

						// Automatically add new stars when too many have been consumed
						while (
							starArray.length <
							(window.innerWidth / 3840) * 800
						) {
							// Add new stars at the edges of the screen
							const side = Math.floor(Math.random() * 4); // 0: top, 1: right, 2: bottom, 3: left
							let x, y;

							switch (side) {
								case 0: // top
									x = Math.random() * window.innerWidth;
									y = 0;
									break;
								case 1: // right
									x = window.innerWidth;
									y = Math.random() * window.innerHeight;
									break;
								case 2: // bottom
									x = Math.random() * window.innerWidth;
									y = window.innerHeight;
									break;
								case 3: // left
									x = 0;
									y = Math.random() * window.innerHeight;
									break;
							}

							// ... add new star with same properties as initial creation ...
							starArray.push({
								x,
								y,
								size: 1.75 + Math.random() * 1.5,
								xVelocity: (Math.random() - 0.5) * 0.2,
								yVelocity: (Math.random() - 0.5) * 0.2,
								opacity: Math.random() * 0.7 + 0.3,
								opacityChange: 0.01,
								startTime: now,
								duration: Math.random() * 5000 + 5000,
								originalX: x,
								originalY: y,
								originalXVelocity: (Math.random() - 0.5) * 0.2,
								originalYVelocity: (Math.random() - 0.5) * 0.2,
							});
						}

						// Meteors animation
						for (let i = 0; i < meteorArray.length; i++) {
							let meteor = meteorArray[i];
							meteor.x -= meteor.speed * Math.cos(meteor.angle);
							meteor.y += meteor.speed * Math.sin(meteor.angle);
							meteor.opacity += meteor.opacityChange;
							if (meteor.opacity > 1) {
								meteor.opacity = 1;
								meteor.opacityChange = -meteor.opacityChange;
							} else if (meteor.opacity < -0.1) {
								meteorArray.splice(i, 1);
								i--;
								continue;
							}

							for (
								let j = 0;
								j < meteor.size * meteor.opacity;
								j++
							) {
								let tailX =
									meteor.x + j * Math.cos(meteor.angle);
								let tailY =
									meteor.y - j * Math.sin(meteor.angle);
								let tailSize =
									meteor.size * Math.exp(-j / meteor.size);
								let tailOpacity =
									meteor.opacity * Math.exp(-j / meteor.size);

								ctx.beginPath();
								ctx.moveTo(tailX, tailY);
								ctx.lineTo(
									tailX + tailSize * Math.cos(meteor.angle),
									tailY - tailSize * Math.sin(meteor.angle),
								);
								ctx.strokeStyle = `rgba(255, 255, 255, ${tailOpacity})`;
								ctx.stroke();
							}
						}

						requestAnimationFrame(animateStars);
					}

					animateStars();

					// Black hole cursor code
					const blackhole =
						document.getElementById("cursor-blackhole");
					if (blackhole) {
						function updatePosition() {
							const ease = 0.15;
							currentX += (targetX - currentX) * ease;
							currentY += (targetY - currentY) * ease;

							// Remove any transform adjustment since we're using CSS transform
							blackhole.style.left = `${currentX}px`;
							blackhole.style.top = `${currentY}px`;

							requestAnimationFrame(updatePosition);
						}
						updatePosition();
					}
				}

				// Measure text width (use the already defined isMobile)
				const text = "Dominik Ritz";
				const hiddenElement = document.createElement("div");
				hiddenElement.style.visibility = "hidden";
				hiddenElement.style.position = "absolute";
				hiddenElement.style.whiteSpace = "nowrap";
				hiddenElement.style.fontSize = "7vw";
				hiddenElement.style.fontFamily = "Montserrat";
				hiddenElement.style.fontWeight = "bold";
				if (isMobile) {
					hiddenElement.style.wordWrap = "break-word";
				}
				hiddenElement.innerText = text;
				document.body.appendChild(hiddenElement);
				const textWidth = hiddenElement.getBoundingClientRect().width;
				document.body.removeChild(hiddenElement);

				const textContainer = document.getElementById("text-container");
				textContainer.style.width = textWidth + "px";

				// Typing effect
				const nameElement = document.getElementById("name");
				const fullName = "Dominik Ritz";
				const [firstName, lastName] = fullName.split(" ");

				function setupTypingStyle(element) {
					element.style.visibility = "visible";
					element.style.display = "inline-block";
					if (isMobile) {
						element.style.fontSize = "14vw"; // larger for mobile
					} else {
						element.style.fontSize = "7vw"; // default for desktop
					}
					element.style.fontFamily = "Montserrat";
					element.style.fontWeight = "bold";
					element.style.textAlign = "center";
					// While typing: gradient background with black text
					element.style.background =
						"linear-gradient(90deg, #8e2de2, #4a00e0, #23d5ab)";
					element.style.webkitBackgroundClip = "border-box";
					element.style.backgroundClip = "border-box";
					element.style.color = "#000"; // black text
					element.style.webkitTextFillColor = "black";
				}

				function typeText(element, text, callback) {
					setupTypingStyle(element);
					element.innerHTML = "";
					let currentIndex = 0;
					let interval = setInterval(() => {
						if (currentIndex < text.length) {
							element.innerHTML += text[currentIndex];
							currentIndex++;
						} else {
							clearInterval(interval);
							if (callback) callback();
						}
					}, 200);
				}

				function finalizeLines(line1, line2) {
					// Apply final gradient text style to both lines
					[line1, line2].forEach((element) => {
						element.style.background =
							"linear-gradient(90deg, #8e2de2, #4a00e0, #23d5ab)";
						element.style.backgroundSize = "200% auto";
						element.style.webkitBackgroundClip = "text";
						element.style.backgroundClip = "text";
						element.style.webkitTextFillColor = "transparent";
						element.style.width = "fit-content";
						element.style.animation = "gradient 5s ease infinite";
					});
				}

				if (isMobile) {
					nameElement.innerHTML = `
					<div id="name-line1"></div>
					<div id="name-line2"></div>
				`;
					const line1 = document.getElementById("name-line1");
					const line2 = document.getElementById("name-line2");

					// Type first line, do NOT finalize after done
					typeText(line1, firstName, () => {
						// Start typing second line
						typeText(line2, lastName, () => {
							// Once second line done, finalize both lines together
							finalizeLines(line1, line2);
						});
					});
				} else {
					// Desktop single line
					nameElement.innerHTML = "";
					typeText(nameElement, fullName, () => {
						// Finalize single line
						nameElement.style.background =
							"linear-gradient(90deg, #8e2de2, #4a00e0, #23d5ab)";
						nameElement.style.backgroundSize = "200% auto";
						nameElement.style.webkitBackgroundClip = "text";
						nameElement.style.backgroundClip = "text";
						nameElement.style.webkitTextFillColor = "transparent";
						nameElement.style.width = "fit-content";
						nameElement.style.animation =
							"gradient 5s ease infinite";
					});
				}

				// Move the blackhole cursor update code inside the onload function
				const blackhole = document.getElementById("cursor-blackhole");
				if (blackhole) {
					function updatePosition() {
						const ease = 0.15;
						currentX += (targetX - currentX) * ease;
						currentY += (targetY - currentY) * ease;

						// Remove any transform adjustment since we're using CSS transform
						blackhole.style.left = `${currentX}px`;
						blackhole.style.top = `${currentY}px`;

						requestAnimationFrame(updatePosition);
					}
					updatePosition();
				}
			};

			// Keep scroll event listener outside
			window.addEventListener("scroll", () => {
				const scrollIndicator =
					document.getElementById("scroll-indicator");
				if (window.scrollY > 0) {
					scrollIndicator.style.opacity = "0";
					scrollIndicator.style.pointerEvents = "none";
				} else {
					scrollIndicator.style.opacity = "1";
					scrollIndicator.style.pointerEvents = "auto";
				}
			});
		</script>
	</head>
	<body>
		<canvas id="stars"></canvas>
		<div class="hero-section">
			<LottieInteractive
				client:only
				animationData={astronautAnimation}
				data-astronaut
			/>
			<div id="text-container">
				<div id="intro">Hi, I'm</div>
				<div id="name">Dominik Ritz</div>
			</div>
			<div id="scroll-indicator">
				<svg
					class="w-6 h-6"
					aria-hidden="true"
					xmlns="http://www.w3.org/2000/svg"
					width="24"
					height="24"
					fill="none"
					viewBox="0 0 24 24"
				>
					<path
						stroke="currentColor"
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="m8 10 4 4 4-4"></path>
				</svg>
			</div>
		</div>
		<div class="social-links-container">
			<div id="links">
				<!-- LinkedIn -->
				<a
					href="https://www.linkedin.com/in/dominik-ritz/"
					target="_blank"
				>
					<svg
						class="links-icons"
						xmlns="http://www.w3.org/2000/svg"
						width="2.5vw"
						height="2.5vw"
						viewBox="0 0 24 24"
						><path
							fill="white"
							d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"
						></path></svg
					>
				</a>
				<!-- GitHub -->
				<a href="https://github.com/Dygitz" target="_blank">
					<svg
						class="links-icons"
						xmlns="http://www.w3.org/2000/svg"
						width="2.5vw"
						height="2.5vw"
						viewBox="0 0 24 24"
						><path
							fill="white"
							d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-4.466 19.59c-.405.078-.534-.171-.534-.384v-2.195c0-.747-.262-1.233-.55-1.481 1.782-.198 3.654-.875 3.654-3.947 0-.874-.312-1.588-.823-2.147.082-.202.356-1.016-.079-2.117 0 0-.671-.215-2.198.82-.64-.18-1.324-.267-2.004-.271-.68.003-1.364.091-2.003.269-1.528-1.035-2.2-.82-2.2-.82-.434 1.102-.16 1.915-.077 2.118-.512.56-.824 1.273-.824 2.147 0 3.064 1.867 3.751 3.645 3.954-.229.2-.436.552-.508 1.07-.457.204-1.614.557-2.328-.666 0 0-.423-.768-1.227-.825 0 0-.78-.01-.055.487 0 0 .525.246.889 1.17 0 0 .463 1.428 2.688.944v1.489c0 .211-.129.459-.528.385-3.18-1.057-5.472-4.056-5.472-7.59 0-4.419 3.582-8 8-8s8 3.581 8 8c0 3.533-2.289 6.531-5.466 7.59z"
						></path></svg
					>
				</a>
			</div>
			<div id="email-container">
				<a id="email" href="mailto:dom_ritz@icloud.com" target="_blank">
					<svg
						class="links-icons"
						xmlns="http://www.w3.org/2000/svg"
						width="4vw"
						height="3.07vw"
						viewBox="0 0 82 64"
						><path
							fill="white"
							d="M66.097,12.089h-56.9C4.126,12.089,0,16.215,0,21.286v32.722c0,5.071,4.126,9.197,9.197,9.197h56.9 c5.071,0,9.197-4.126,9.197-9.197V21.287C75.295,16.215,71.169,12.089,66.097,12.089z M61.603,18.089L37.647,33.523L13.691,18.089 H61.603z M66.097,57.206h-56.9C7.434,57.206,6,55.771,6,54.009V21.457l29.796,19.16c0.04,0.025,0.083,0.042,0.124,0.065 c0.043,0.024,0.087,0.047,0.131,0.069c0.231,0.119,0.469,0.215,0.712,0.278c0.025,0.007,0.05,0.01,0.075,0.016 c0.267,0.063,0.537,0.102,0.807,0.102c0.001,0,0.002,0,0.002,0c0.002,0,0.003,0,0.004,0c0.27,0,0.54-0.038,0.807-0.102 c0.025-0.006,0.05-0.009,0.075-0.016c0.243-0.063,0.48-0.159,0.712-0.278c0.044-0.022,0.088-0.045,0.131-0.069 c0.041-0.023,0.084-0.04,0.124-0.065l29.796-19.16v32.551C69.295,55.771,67.86,57.206,66.097,57.206z"
						></path></svg
					>
				</a>
			</div>
		</div>

		<section class="about-section">
			<h2 class="about-title">About Me</h2>
			<div class="about-card">
				<div class="about-content">
					I'm a passionate software engineer with a focus on AI. I'm
					currently a 2A Software Engineering student at the
					University of Waterloo. The unknown piques my interest and
					I'm always eager to learn new things. In my free time, I
					keep up with the latest AI research, often reading papers on
					arXiv. Outside of academics, I like cooking, traveling,
					working out at the gym, and playing ultimate frisbee. I'm
					always looking for opportunities to learn and grow, so feel
					free to reach out—I'm happy to connect!
				</div>
			</div>
		</section>
		<section style="padding-top:6rem; position: relative; z-index: 3;">
			<h2
				style="
        text-align: center; 
        color: #fff; 
        font-family: Montserrat, sans-serif; 
        font-size: 3.5rem;
        margin-bottom: 2rem;
      "
			>
				Experience
			</h2>
			<!-- Ensure client-side rendering for transitions -->
			<Timeline client:load items={jobs} />
		</section>
		<div id="cursor-blackhole" class="cursor-blackhole"></div>
	</body>
</html>
