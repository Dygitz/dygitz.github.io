---
import LottieInteractive from "./LottieInteractive.svelte";
import astronautAnimation from "/astronaut.json";
---

<div class="hero-section">
	<LottieInteractive
		client:only
		animationData={astronautAnimation}
		data-astronaut
	/>
	<div id="text-container">
		<div id="intro">Hi, I'm</div>
		<div id="name">Dominik Ritz</div>
	</div>
	<div id="scroll-indicator">
		<svg
			class="w-6 h-6"
			aria-hidden="true"
			xmlns="http://www.w3.org/2000/svg"
			width="24"
			height="24"
			fill="none"
			viewBox="0 0 24 24"
		>
			<path
				stroke="currentColor"
				stroke-linecap="round"
				stroke-linejoin="round"
				stroke-width="2"
				d="m8 10 4 4 4-4"></path>
		</svg>
	</div>
</div>

<style>
	.hero-section {
		height: 100vh;
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		position: relative;
		overflow: hidden;
		z-index: 3;
	}

	#name {
		visibility: hidden;
		position: absolute;
		font-size: 7vw;
		top: 46%;
		font-family: "Montserrat", serif;
		font-weight: bold;
		text-align: center;
		width: max-content;
		background: linear-gradient(90deg, #8e2de2, #4a00e0, #23d5ab);
		background-size: 200% auto;
		animation: gradient 5s ease infinite;
		z-index: 1;
	}

	#intro {
		font-size: 4vw;
		font-family: "Montserrat", serif;
		font-weight: bold;
		text-align: center;
		color: #fff;
		position: absolute;
		line-height: 1.2;
		top: 36%;
		z-index: 1;
	}

	#text-container {
		display: flex;
		flex-direction: column;
		align-items: center;
	}

	@keyframes gradient {
		0% {
			background-position: 0 50%;
		}
		50% {
			background-position: 100% 50%;
		}
		100% {
			background-position: 0 50%;
		}
	}

	#scroll-indicator {
		position: absolute;
		scale: 3;
		bottom: 5%;
		left: 50%;
		animation: bounce 2s infinite;
		transition: opacity 0.3s ease;
		z-index: 4;
	}

	#scroll-indicator svg {
		color: white;
	}

	@keyframes bounce {
		0%,
		20%,
		50%,
		80%,
		100% {
			transform: translate(-10%, 0);
		}
		40% {
			transform: translate(-10%, -20px);
		}
		60% {
			transform: translate(-10%, -10px);
		}
	}

	/* Mobile responsive */
	@media (max-width: 767px) {
		#scroll-indicator {
			bottom: 7%;
		}

		#name {
			font-size: 10vw;
			display: flex;
			flex-direction: column;
			align-items: center;
		}

		:global(#name-line1),
		:global(#name-line2) {
			font-size: 9vw;
			line-height: 1.2;
		}

		#intro {
			font-size: 12vw;
			line-height: 1.2;
		}
	}
</style>

<script>
	window.addEventListener("DOMContentLoaded", () => {
		const isMobile = window.innerWidth <= 767;

		// Measure text width (use the already defined isMobile)
		const text = "Dominik Ritz";
		const hiddenElement = document.createElement("div");
		hiddenElement.style.visibility = "hidden";
		hiddenElement.style.position = "absolute";
		hiddenElement.style.whiteSpace = "nowrap";
		hiddenElement.style.fontSize = "7vw";
		hiddenElement.style.fontFamily = "Montserrat";
		hiddenElement.style.fontWeight = "bold";
		if (isMobile) {
			hiddenElement.style.wordWrap = "break-word";
		}
		hiddenElement.innerText = text;
		document.body.appendChild(hiddenElement);
		const textWidth = hiddenElement.getBoundingClientRect().width;
		document.body.removeChild(hiddenElement);

		const textContainer = document.getElementById("text-container");
		textContainer.style.width = textWidth + "px";

		// Typing effect
		const nameElement = document.getElementById("name");
		const fullName = "Dominik Ritz";
		const [firstName, lastName] = fullName.split(" ");

		function setupTypingStyle(element) {
			element.style.visibility = "visible";
			element.style.display = "inline-block";
			if (isMobile) {
				element.style.fontSize = "14vw"; // larger for mobile
			} else {
				element.style.fontSize = "7vw"; // default for desktop
			}
			element.style.fontFamily = "Montserrat";
			element.style.fontWeight = "bold";
			element.style.textAlign = "center";
			// While typing: gradient background with black text
			element.style.background =
				"linear-gradient(90deg, #8e2de2, #4a00e0, #23d5ab)";
			element.style.webkitBackgroundClip = "border-box";
			element.style.backgroundClip = "border-box";
			element.style.color = "#000"; // black text
			element.style.webkitTextFillColor = "black";
		}

		function typeText(element, text, callback) {
			setupTypingStyle(element);
			element.innerHTML = "";
			let currentIndex = 0;
			let interval = setInterval(() => {
				if (currentIndex < text.length) {
					element.innerHTML += text[currentIndex];
					currentIndex++;
				} else {
					clearInterval(interval);
					if (callback) callback();
				}
			}, 200);
		}

		function finalizeLines(line1, line2) {
			// Apply final gradient text style to both lines
			[line1, line2].forEach((element) => {
				element.style.background =
					"linear-gradient(90deg, #8e2de2, #4a00e0, #23d5ab)";
				element.style.backgroundSize = "200% auto";
				element.style.webkitBackgroundClip = "text";
				element.style.backgroundClip = "text";
				element.style.webkitTextFillColor = "transparent";
				element.style.width = "fit-content";
				element.style.animation = "gradient 5s ease infinite";
			});
		}

		if (isMobile) {
			nameElement.innerHTML = `
			<div id="name-line1"></div>
			<div id="name-line2"></div>
		`;
			const line1 = document.getElementById("name-line1");
			const line2 = document.getElementById("name-line2");

			// Type first line, do NOT finalize after done
			typeText(line1, firstName, () => {
				// Start typing second line
				typeText(line2, lastName, () => {
					// Once second line done, finalize both lines together
					finalizeLines(line1, line2);
				});
			});
		} else {
			// Desktop single line
			nameElement.innerHTML = "";
			typeText(nameElement, fullName, () => {
				// Finalize single line
				nameElement.style.background =
					"linear-gradient(90deg, #8e2de2, #4a00e0, #23d5ab)";
				nameElement.style.backgroundSize = "200% auto";
				nameElement.style.webkitBackgroundClip = "text";
				nameElement.style.backgroundClip = "text";
				nameElement.style.webkitTextFillColor = "transparent";
				nameElement.style.width = "fit-content";
				nameElement.style.animation =
					"gradient 5s ease infinite";
			});
		}
	});

	// Scroll event listener for scroll indicator
	window.addEventListener("scroll", () => {
		const scrollIndicator = document.getElementById("scroll-indicator");
		if (window.scrollY > 0) {
			scrollIndicator.style.opacity = "0";
			scrollIndicator.style.pointerEvents = "none";
		} else {
			scrollIndicator.style.opacity = "1";
			scrollIndicator.style.pointerEvents = "auto";
		}
	});
</script>